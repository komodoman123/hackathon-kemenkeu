import base64

def decode_base64_to_image(base64_string, output_image_path):
    try:
        # Step 1: Remove the 'data:image/png;base64,' prefix if present
        if base64_string.startswith('data:image'):
            base64_string = base64_string.split(',')[1]

        # Step 2: Check the length and pad the Base64 string to a multiple of 4
        if len(base64_string) % 4 != 0:
            missing_padding = 4 - (len(base64_string) % 4)
            base64_string += '=' * missing_padding
        
        # Step 3: Decode the base64 string
        image_data = base64.b64decode('iVBORw0KGgoAAAANSUhEUgAAAoAAAAHgCAYAAAA10dzkAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAlOUlEQVR4nO3dfZTWdZ3/8dcMxIAhaALDTRiphboieJP80LyJCDKXsnM2OdqGS0arQSlTRqRCrhW2m8puS5IY1W56sGy1XF2Ig0KpFArS6qZkagulw00EQ6BgM/P7Y4+zzYJECnPh9Xk8zrnOaT7X93td76tvXj39Xnc1ra2trQEAoBi1lR4AAICOJQABAAojAAEACiMAAQAKIwABAAojAAEACiMAAQAKIwABAAojAAEACiMAAQAKIwABAAojAAEACiMAAQAKIwABAAojAAEACiMAAQAKIwABAAojAAEACiMAAQAKIwABAAojAAEACiMAAQAKIwABAAojAAEACiMAAQAKIwABAAojAAEACiMAAQAKIwABAArTudIDvJa1tLTk2WefzcEHH5yamppKjwMA7IXW1tZs3bo1/fv3T21tmefCBOCr8Oyzz2bgwIGVHgMAeAXWrl2bN77xjZUeoyIE4Ktw8MEHJ/mf/wH16NGjwtMAAHujqakpAwcObPv/8RIJwFfhpZd9e/ToIQAB4DWm5LdvlfnCNwBAwQQgAEBhBCAAQGEEIABAYQQgAEBhBCAAQGEEIABAYQQgAEBhBCAAQGEEIABAYQQgAEBhBCAAQGEEIABAYQQgAEBhBCAAQGEEIABAYQQgAEBhBCAAQGEEIABAYQQgAEBhBCAAQGEEIABAYaomAH/0ox9l7Nix6d+/f2pqanLnnXf+yX2WLFmSE088MXV1dTnqqKPyzW9+c7/PCQBQaVUTgNu2bcvQoUMze/bsvdr+mWeeyTnnnJN3vOMdWbVqVS677LJ85CMfycKFC/fzpAAAldW50gPsK2effXbOPvvsvd5+zpw5efOb35zrrrsuSXLMMcfynve8px999NH84Ac/yKFDh3a7z6FDh9K5c+c8/fTTefDBB3PBBRfkzDPPzPXXX59zzjknZ512Wj7yEY+kvr5+9KMfZfHixbnpppt6tN8hQ4bkT3/6U/bu3Zu77747P/zhD7nttvvqV7/6Venp6WlsbKxHH300n/zkJznttNvSo0ePcvHFF+f666/PkiVL8pOf/CT33HNPu+0OO+yQPv30U7bffvt86Utfyoknnph169blwAMPzPXXX5/rrrsuH/3oRznxxBPz1ltvZeDAgcyePTuPPfZYPv/8c/7rv/7rHHfccbn77rszd+7cXH755TnjjDPyjW98Iw8//HD69OnjjDPOyIQJE/L888/nmmuuyfz58/P973/P7Nmz8+qrr+bmm2/O+vXrs3LlyjzzzDMZPnx4rrzyyrz99tv5+7//+7nppps6dOgQr732Wt7xjnfk3HPPzW9/+9ucddZZefvtt3PMMcfkQx/6UB588MGMHTs2n/zkJ3n66aezZs2avPzyy/nPf/5zDj/88AzpUz/6U/bu3ZuDDz44r3zlK7n22muzZs2aXHfddbnvvvuS//3f/3eOOeaYPvWpT+Xaa6/N9OnTM3v2bH7whz/kjTfe6OLxAQB1U9WbQHzs2LFsvPHG+fWvf52f/OQn+dWvfpVXXnklX/rSl/L888/nxhtvzB//8R/y5ptv5t13302TJk1y22235dFHH82qVauyfv36NH/+/GzatCldu3bNokWL8uMf/zjHHHNMnvrUp5Ikn/zkJxk2bFiuvPLKfOtb38rTTz+dYcOG5cUXX8zRRx+dF198Mc8991yOOuqoPPzwwznkkEPy7ne/+wPf/exn2bZtW3r37p3LL7/cdrt37tz8+7//+0PvBwDgSqoqwOHh4VGSZPHixTnqqKPyi1/8Ig8++GBOPfXUHH744Tn//POzZs0aLX3ZsmVLvvOd7+TQQw/NH//4x7z44ovZs2fPvP7663nttdeyYcOGfOQjH8kHP/hBzjvvvHzuc5/LzTffnEcffTT33XdfXnjhhbnssssyf/58pk6dmq985Ss57rjjMnjw4Gzbti3HH398HnnkEV71qlfl8ccfz1VXXZUFCxaknTt3ZuDAgbntttvy+9//PrNnz87MmTMzZMiQbL/99rn++uvz7ne/m9/4xjfyk5/8JGeffTatX78+L/3pT/P444/n+9//fj7ykY/kZz/7WV76ylcmSb7zne+kwYMHZ8mSJdm8eXO++MUvZtOmTXn7299m9+7deeaZZ/LKV76Sv/zLv8zIkSOzefPmHH300bn55ptz4403pqmpKWPGjMmVV16ZG264IV/84hc56KGHMnTo0Fx22WXZsmVLWbFiRb7w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')

        # Step 4: Write the binary data to an image file
        with open(output_image_path, 'wb') as image_file:
            image_file.write(image_data)

        print(f"Image saved at {output_image_path}")
    except Exception as e:
        print(f"An error occurred: {e}")

# Example usage
base64_string = 'iVBORw0KGgoAAAANSUhEUgAAAoAAAAHgCAYAAAA10dzkAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAlOUlEQVR4nO3dfZTWdZ3/8dcMxIAhaALDTRiphboieJP80LyJCDKXsnM2OdqGS0arQSlTRqRCrhW2m8puS5IY1W56sGy1XF2Ig0KpFArS6qZkagulw00EQ6BgM/P7Y4+zzYJECnPh9Xk8zrnOaT7X93td76tvXj39Xnc1ra2trQEAoBi1lR4AAICOJQABAAojAAEACiMAAQAKIwABAAojAAEACiMAAQAKIwABAAojAAEACiMAAQAKIwABAAojAAEACiMAAQAKIwABAAojAAEACiMAAQAKIwABAAojAAEACiMAAQAKIwABAAojAAEACiMAAQAKIwABAAojAAEACiMAAQAKIwABAAojAAEACiMAAQAKIwABAArTudIDvJa1tLTk2WefzcEHH5yamppKjwMA7IXW1tZs3bo1/fv3T21tmefCBOCr8Oyzz2bgwIGVHgMAeAXWrl2bN77xjZUeoyIE4Ktw8MEHJ/mf/wH16NGjwtMAAHujqakpAwcObPv/8RIJwFfhpZd9e/ToIQAB4DWm5LdvlfnCNwBAwQQgAEBhBCAAQGEEIABAYQQgAEBhBCAAQGEEIABAYQQgAEBhBCAAQGEEIABAYQQgAEBhBCAAQGEEIABAYQQgAEBhBCAAQGEEIABAYQQgAEBhBCAAQGEEIABAYQQgAEBhBCAAQGEEIABAYaomAH/0ox9l7Nix6d+/f2pqanLnnXf+yX2WLFmSE088MXV1dTnqqKPyzW9+c7/PCQBQaVUTgNu2bcvQoUMze/bsvdr+mWeeyTnnnJN3vOMdWbVqVS677LJ85CMfycKFC/fzpAAAldW50gPsK2effXbOPvvsvd5+zpw5efOb35zrrrsuSXLMMcfynve8px999NH84Ac/yKFDh3a7z6FDh9K5c+c8/fTTefDBB3PBBRfkzDPPzPXXX59zzjknZ512Wj7yEY+kvr5+9KMfZfHixbnpppt6tN8hQ4bkT3/6U/bu3Zu77747P/zhD7nttvvqV7/6Venp6WlsbKxHH300n/zkJznttNvSo0ePcvHFF+f666/PkiVL8pOf/CT33HNPu+0OO+yQPv30U7bffvt86Utfyoknnph169blwAMPzPXXX5/rrrsuH/3oRznxxBPz1ltvZeDAgcyePTuPPfZYPv/8c/7rv/7rHHfccbn77rszd+7cXH755TnjjDPyjW98Iw8//HD69OnjjDPOyIQJE/L888/nmmuuyfz58/P973/P7Nmz8+qrr+bmm2/O+vXrs3LlyjzzzDMZPnx4rrzyyrz99tv5+7//+7nppps6dOgQr732Wt7xjnfk3HPPzW9/+9ucddZZefvtt3PMMcfkQx/6UB588MGMHTs2n/zkJ3n66aezZs2avPzyy/nPf/5zDj/88AzpUz/6U/bu3ZuDDz44r3zlK7n22muzZs2aXHfddbnvvvuS//3f/3eOOeaYPvWpT+Xaa6/N9OnTM3v2bH7whz/kjTfe6OLxAQB1U9WbQHzs2LFsvPHG+fWvf52f/OQn+dWvfpVXXnklX/rSl/L888/nxhtvzB//8R/y5ptv5t13302TJk1y22235dFHH82qVauyfv36NH/+/GzatCldu3bNokWL8uMf/zjHHHNMnvrUp5Ikn/zkJxk2bFiuvPLKfOtb38rTTz+dYcOG5cUXX8zRRx+dF198Mc8991yOOuqoPPzwwznkkEPy7ne/+wPf/exn2bZtW3r37p3LL7/cdrt37tz8+7//+0PvBwDgSqoqwOHh4VGSZPHixTnqqKPyi1/8Ig8++GBOPfXUHH744Tn//POzZs0aLX3ZsmVLvvOd7+TQQw/NH//4x7z44ovZs2fPvP7663nttdeyYcOGfOQjH8kHP/hBzjvvvHzuc5/LzTffnEcffTT33XdfXnjhhbnssssyf/58pk6dmq985Ss57rjjMnjw4Gzbti3HH398HnnkEV71qlfl8ccfz1VXXZUFCxaknTt3ZuDAgbntttvy+9//PrNnz87MmTMzZMiQbL/99rn++uvz7ne/m9/4xjfyk5/8JGeffTatX78+L/3pT/P444/n+9//fj7ykY/kZz/7WV76ylcmSb7zne+kwYMHZ8mSJdm8eXO++MUvZtOmTXn7299m9+7deeaZZ/LKV76Sv/zLv8zIkSOzefPmHH300bn55ptz4403pqmpKWPGjMmVV16ZG264IV/84hc56KGHMnTo0Fx22WXZsmVLWbFiRb7w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'
output_path = 'output_image.png'

decode_base64_to_image(base64_string, output_path)
